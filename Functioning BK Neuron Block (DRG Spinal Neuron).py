# -*- coding: utf-8 -*-
"""BME 517 Final - DRG Neuron (IClamp Block Functional)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xIqwwS0W1X7K7dlr60Bx2rrk-B8A9f2r
"""

!pip install neuron
from neuron import h
from neuron.units import ms, mV, um
from math import e #Euler's number
import math
import matplotlib.pyplot as plt
import numpy as np
import scipy.io
h.load_file("stdrun.hoc")

"""---DRG NEURON FORM---
- Needs an axon hillock?
- Once the block works on the standard, parietal neuron above, then transfer the stimulus injections to the DRG neuron below to see if the block is effective
"""

dend = h.Section(name = 'dend')
dend.L = 5000 * um
dend.diam = 80 * um
dend.nseg = 400
dend.insert(h.hh)
dend.insert(h.pas)
dend.insert(h.extracellular)

soma = h.Section(name = "soma")
soma.L = 20 * um
soma.diam = 80 * um
soma.nseg = 1 #ModelDB has 1 seg
soma.insert(h.hh)
soma.insert(h.pas)
soma.insert(h.extracellular)
soma.nai = 13.74
soma.nao = 114.5
soma.ki = 120
soma.ko = 2.5
soma.gl_hh = 0.0002

#does the DRG require a hillock? 
# Was told its a really long dendrite, 
# an inconsequential soma, and a really long axon
hillock = h.Section(name = 'hillock') 
hillock.L = 16 * um
hillock.nseg = 9

i = 80
j = 1
while j < 10:
  hillock(j * 0.1).diam = i * um
  j = j + 1 #all 9 segments
  i = i - 7.5 #even spacing from soma to axon (80 - 5 um)

hillock.insert(h.hh)
hillock.insert(h.pas)
hillock.insert(h.extracellular)

axon = h.Section(name = 'axon')
axon.L = 10000 * um
axon.diam = 20 * um
axon.nseg = 400 # 4,000 segments -- ModelDB (2003) is only *6* segments
axon.insert(h.hh)
axon.insert(h.pas)
axon.insert(h.extracellular)
axon.Ra = 200 #ohm-cm**2
axon.g_pas = 0.0002
axon.nai = 13.74
axon.nao = 114.5
axon.ki = 120
axon.ko = 2.5

soma.connect(dend)
hillock.connect(soma)
axon.connect(hillock)

block = h.IClamp(axon(0.5))
block.delay = 0 * ms
block.dur = 1e3 * ms
block.amp = 90 #90 is the min for blocking to work on this current neuron

stim = h.IClamp(dend(0))
stim.delay = 1 * ms
stim.dur = 0.1 * ms
stim.amp = 1080

trial1 = h.IClamp(dend(0))
trial1.delay = 30 * ms
trial1.dur = 0.1 * ms
trial1.amp = 1080

trial2 = h.IClamp(dend(0))
trial2.delay = 150 * ms
trial2.dur = 0.1 * ms
trial2.amp = 1080

trial3 = h.IClamp(dend(0))
trial3.delay = 230 * ms
trial3.dur = 0.1 * ms
trial3.amp = 1080

v1 = h.Vector().record(axon(0.1)._ref_v)
t1 = h.Vector().record(h._ref_t)

v2 = h.Vector().record(axon(0.5)._ref_v)
t2 = h.Vector().record(h._ref_t)

v3 = h.Vector().record(axon(0.9)._ref_v)
t3 = h.Vector().record(h._ref_t)

h.finitialize(-70 * mV) 
h.continuerun(300 * ms)

plt.plot(t1, v1, 'r', label=  'axon start')
plt.plot(t2, v2, 'g', label=  'BLOCK')
plt.plot(t3, v3, 'b', label=  'axon end')

plt.xlabel('time (ms)')
plt.ylabel('electrical potential (mV)')
plt.title('IClamp Block - DRG Neuron')
plt.legend()
plt.show()